Max min
#include<stdio.h>
#include<stdlib.h>

void main()
{
    int n,max,min,maxpos,minpos;
    printf("Enter no of elements\n");
    scanf("%d",&n);
    int a[n];
    printf("Enter the elements\n");
    for(int i =0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }
    max= a[0];
    min = a[0];
    maxpos = 0;
    minpos = 0;
    for(int i = 0;i<n;i++)
    {
        if(a[i]>max)
        {
            max = a[i];
            maxpos = i;
        }
    }
    for(int i = 0;i<n;i++)
    {
        if(a[i]<min)
        {
            min = a[i];
            minpos = i;
        }
    }
    printf("Largest element is %d at position %d\n",max,maxpos+1);
    printf("Smallest element is %d at position %d",min,minpos+1);
}
-----------------------------------------------------------------------------
Linear Search
#include<stdio.h>

int main()
{
    int n;
    printf("Enter no of elements\n");
    scanf("%d",&n);
    int a[n];
    printf("Enter elements\n");
    for(int i = 0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }
    int item;
    printf("Enter element to be searched\n");
    scanf("%d",&item);
    int flag = 0,j = 0;
    for(int i =0;i<n;i++)
    {
        if(a[i]==item)
        {
            flag = 1;
            j = i;
            break;
        }
    }
    if(flag==1)
    {
        printf("Element is present at index %d",j);
    }
    else
    {
        printf("Element is not present in the array");
    }
}
-----------------------------------------------------------------------------
Iterative Binary Search
#include<stdio.h>
int BinSearch(int *A,int n,int x)
{
    int low = 0,high = n-1;
    int mid;
    while(low<=high)
    {
        mid = (low+high)/2;
        if(x<A[mid])
        high = mid-1;
        else if(x>A[mid])
        low = mid+1;
        else
        return mid;
    }
    return -1;
}

int main()
{
    int n;
    printf("Enter no of elements\n");
    scanf("%d",&n);
    int a[n];
    printf("Enter elements\n");
    for(int i = 0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }
    int item;
    printf("Enter the element to be searched\n");
    scanf("%d",&item);
    int index = BinSearch(a,n,item);
    if(index==-1)
    printf("Element not found");
    else
    printf("Element found at index position %d",index);
}
-----------------------------------------------------------------------------
Recursive Binary Search
#include<stdio.h>

int BinSearch(int arr[], int l, int r ,int x)
{
   if (r >= l)
   {
        int mid = l + (r - l)/2;
        if (arr[mid] == x)  
        return mid;
        if (arr[mid] > x) 
        return BinSearch(arr, l, mid-1, x);
        return BinSearch(arr, mid+1, r, x);
   }
   return -1;
}

int main()
{
    int n;
    printf("Enter no of elements\n");
    scanf("%d",&n);
    int a[n];
    printf("Enter elements\n");
    for(int i = 0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }
    int item;
    printf("Enter the element to be searched\n");
    scanf("%d",&item);
    int index = BinSearch(a,0,n-1,item);
    if(index==-1)
    printf("Element not found");
    else
    printf("Element found at index position %d",index);
}
---------------------------------------------------------------------------
Bubble Sort
#include<stdio.h>
void BubbleSort(int *A,int n)
{
    int temp;
    int j = n-1;
    while(j>0)
    {
        for(int i = 0;i<j;i++)
        {
            if(A[i]>A[i+1])
            {
                temp = A[i];
                A[i] = A[i+1];
                A[i+1] = temp;
            }
        }
        j--;
    }
}

int main()
{
    int n;
    printf("Enter no of elements\n");
    scanf("%d",&n);
    int a[n];
    printf("Enter elements\n");
    for(int i = 0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }
    BubbleSort(a,n);
    printf("The sorted array is as follows:\n");
    for(int  i =0;i<n;i++)
    {
        printf("%d ",a[i]);
    }
}
-----------------------------------------------------------------------------
Selection Sort
#include<stdio.h>
void SelectionSort(int *A,int n)
{
    int min,k,temp;
    int j = 0;
    while(j<n-1)
    {
        min = A[j];k = j;
        for(int i =j+1;i<n;i++)
        {
            if(A[i]<min)
            {
                min = A[i];
                k = i;
            }
        }
        temp = A[j];
        A[j] = A[k];
        A[k] = temp;
        j++;
    }
}

int main()
{
    int n;
    printf("Enter no of elements\n");
    scanf("%d",&n);
    int a[n];
    printf("Enter elements\n");
    for(int i = 0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }
    SelectionSort(a,n);
    printf("The sorted array is as follows:\n");
    for(int  i =0;i<n;i++)
    {
        printf("%d ",a[i]);
    }
}
-----------------------------------------------------------------------------
Insertion Sort

#include<stdio.h>
void InsertionSort(int *A, int n)
{
int i,j,k;
for (i = 1; i < n; i++) {
k = A[i];
j = i - 1;
while (j >= 0 && A[j] > k)
{
A[j + 1] = A[j];
j = j - 1;
}
A[j + 1] = k;
}
}


int main()
{
int size;
printf("Enter the size of the array=");
scanf("%d",&size);
int a[size];
printf("Enter %d number of elements in the array in random order:\n",size);
for(int i=0;i<size;i++)
{
scanf("%d",&a[i]);
}
InsertionSort(a,size);
printf("The sorted array is as follows:");
for(int i=0;i<size;i++)
{
printf("\n%d",a[i]);
}
}
--------------------------------------------------------------------------
Heapsort 
#include<stdio.h>

void Adjust(int *a,int i,int n)
{
    int j = 2*i;
    int item = a[i];
    while(j<=n)
    {
        if((j<n)&&(a[j]<a[j+1]))
        {
            j = j+1;
        }
        if(item>=a[j])
        {
            a[j/2] = a[j];
            j = 2*j;
        }
    }
    a[j/2] = item;
}

void Heapify(int *a,int n)
{
    for(int i = n/2;i>=1;i--)
    {
        Adjust(a,i,n);
    }
}

void HeapSort(int *a,int n)
{
    Heapify(a,n);
    for(int i = n;i>=2;i--)
    {
        
        int t = a[i];
        a[i] = a[1];
        a[1] = t;
        Adjust(a,1,i-1);
    }
}

void main()
{
    int n;
    printf("Enter size of the array\n");
    scanf("%d",&n);
    int a[n+1];
    printf("Enter elements\n");
    for(int i = 1;i<=n;i++)
    {
        scanf("%d",&a[i]);
    }
    HeapSort(a,n);
    printf("The sorted array is as follows\n");
    for(int i =1;i<=n;i++)
    {
        printf("%d ",a[i]);
    }
}
---------------------------------------------------------------------------
Mergesort
#include<stdio.h>
int a[100],b[100];
void Merge(int low,int mid,int high)
{
    int h = low,i = low,j = mid+1,k;
    while((h<=mid)&&(j<=high))
    {
        if(a[h]<=a[j])
        {
            b[i] = a[h];
            h = h+1;
        }
        else
        {
            b[i] = a[j];
            j = j+1;
        }
        i = i+1;
    }
    if(h>mid)
    {
        for(k = j;k<=high;k++)
        {
            b[i] = a[k];
            i = i+1;
        }
    }
    else
    {
        for(k = h;k<=mid;k++)
        {
            b[i] = a[k];
            i = i+1;
        }
    }
    for(k = low;k<=high;k++)
    {
        a[k] = b[k];
    }
}

void MergeSort(int low,int high)
{
    int mid;
    if(low<high)
    {
        mid = (low+high)/2;
	MergeSort(low,mid);
        MergeSort(mid+1,high);
        Merge(low,mid,high);
    }
}

void main()
{
    int n;
    printf("Enter the no of elements\n");
    scanf("%d",&n);
    printf("Enter elements\n");
    for(int i =1;i<=n;i++)
    {
        scanf("%d",&a[i]);
    }
    MergeSort(1,n);
    printf("Sorted array is as follow:\n");
    for(int i =1;i<=n;i++)
    {
        printf("%d ",a[i]);
    }
}

---------------------------------------------------------------------------
Quicksort
#include<stdio.h>
int a[100];
int Partition(int low,int high)
{
    int mid = (low+high)/2;
    int pivot = a[mid];
    int t = a[mid];
    a[mid] = a[high];
    a[high] = t;
    int i = low,j = high-1;
    while(i<=j)
    {
        while(pivot>a[i])
        {
            i++;
        }
        while((pivot<a[j])&&(j>=low))
        {
            j--;
        }
        if(i<j)
        {
            t = a[j];
            a[j] = a[i];
            a[i] = t;
        }
    }
    a[high] = a[i];
    a[i] = pivot;
    return i;
}

void Quicksort(int low,int high)
{
    if(low<high)
    {
        int k = Partition(low,high);
        Quicksort(low,k-1);
        Quicksort(k+1,high);
    }
}

void main()
{
    int n;
    printf("Enter no of elements\n");
    scanf("%d",&n);
    printf("Enter elements\n");
    for(int i = 1;i<=n;i++)
    {
        scanf("%d",&a[i]);
    }
    Quicksort(1,n);
    printf("The sorted array is as follows:\n");
    for(int i = 1;i<=n;i++)
    {
        printf("%d ",a[i]);
    }
}

----------------------------------------------------------------------------
Knapsack
# include<stdio.h>
 
void knapsack(int n, float weight[], float profit[], float capacity) {
   float x[20], tp = 0;
   int i, j, u;
   u = capacity;
 
   for (i = 0; i < n; i++)
      x[i] = 0.0;
 
   for (i = 0; i < n; i++) {
      if (weight[i] > u)
         break;
      else {
         x[i] = 1.0;
         tp = tp + profit[i];
         u = u - weight[i];
      }
   }
 
   if (i < n)
      x[i] = u / weight[i];
 
   tp = tp + (x[i] * profit[i]);
 
   printf("\nThe result vector is:- ");
   for (i = 0; i < n; i++)
      printf("%f\t", x[i]);
 
   printf("\nMaximum profit is:- %f", tp);
 
}
 
int main() {
   float weight[20], profit[20], capacity;
   int num, i, j;
   float ratio[20], temp;
 
   printf("\nEnter the no. of objects:- ");
   scanf("%d", &num);
 
   printf("\nEnter the weights and profits of each object:- ");
   for (i = 0; i < num; i++) {
      scanf("%f %f", &weight[i], &profit[i]);
   }
 
   printf("\nEnter the capacity of knapsack:- ");
   scanf("%f", &capacity);
 
   for (i = 0; i < num; i++) {
      ratio[i] = profit[i] / weight[i];
   }
 
   for (i = 0; i < num; i++) {
      for (j = i + 1; j < num; j++) {
         if (ratio[i] < ratio[j]) {
            temp = ratio[j];
            ratio[j] = ratio[i];
            ratio[i] = temp;
 
            temp = weight[j];
            weight[j] = weight[i];
            weight[i] = temp;
 
            temp = profit[j];
            profit[j] = profit[i];
            profit[i] = temp;
         }
      }
   }
 
   knapsack(num, weight, profit, capacity);
   return(0);
}
